<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppWizard_Description" xml:space="preserve">
    <value>Project Description</value>
  </data>
  <data name="AppWizard_Help" xml:space="preserve">
    <value>The App Wizard will take the output of a survey and create a project and potentially and IoT project.</value>
  </data>
  <data name="AppWizard_ProjectDescription" xml:space="preserve">
    <value>Project Description</value>
  </data>
  <data name="AppWizard_ProjectKey" xml:space="preserve">
    <value>Project Key</value>
  </data>
  <data name="AppWizard_ProjectName" xml:space="preserve">
    <value>Project Name</value>
  </data>
  <data name="AppWizard_ProjectTemplate" xml:space="preserve">
    <value>Project Template</value>
  </data>
  <data name="AppWizard_ProjectTemplate_Select" xml:space="preserve">
    <value>-select project template-</value>
  </data>
  <data name="AppWizard_TItle" xml:space="preserve">
    <value>App Wizard</value>
  </data>
  <data name="Common_Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Common_Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Common_Summary" xml:space="preserve">
    <value>Summary</value>
  </data>
  <data name="ProductLineObjectType_ObjectType" xml:space="preserve">
    <value>Object Type</value>
  </data>
  <data name="ProductLineObject_CustomizationInstructions" xml:space="preserve">
    <value>Customization Instructions</value>
  </data>
  <data name="ProductLineObject_Help" xml:space="preserve">
    <value>Product Line Objects are specific NuvIoT objects that need to be included to make the application work</value>
  </data>
  <data name="ProductLineObject_Object" xml:space="preserve">
    <value>Object</value>
  </data>
  <data name="ProductLineObject_ObjectType_Select" xml:space="preserve">
    <value>-select object type-</value>
  </data>
  <data name="ProductLineObject_Object_Select" xml:space="preserve">
    <value>-select object-</value>
  </data>
  <data name="ProductLineObject_Title" xml:space="preserve">
    <value>Product Line Object</value>
  </data>
  <data name="ProductLines_Name" xml:space="preserve">
    <value>Products</value>
  </data>
  <data name="ProductLine_Description" xml:space="preserve">
    <value>A Product is a collectoin of objects that make up the components for an IoT application.</value>
  </data>
  <data name="ProductLine_Name" xml:space="preserve">
    <value>Product</value>
  </data>
  <data name="ProductLine_Objects" xml:space="preserve">
    <value>Objects</value>
  </data>
  <data name="ProductLine_Objects_Help" xml:space="preserve">
    <value>Objects are NuvIoT objects that are reqired for this Product Line.</value>
  </data>
  <data name="ProductLine_ToDoTemplates" xml:space="preserve">
    <value>ToDo Templates</value>
  </data>
  <data name="ProductLine_ToDoTemplate_Help" xml:space="preserve">
    <value>These ToDo's will be created as part of the new organization.</value>
  </data>
  <data name="ToDoTemplate_DueDateDays" xml:space="preserve">
    <value>Relative Due Date</value>
  </data>
  <data name="ToDoTemplate_DueDateDays_Help" xml:space="preserve">
    <value>Number of days after the org was created the this to do should be completed.</value>
  </data>
  <data name="ToDoTemplate_Help" xml:space="preserve">
    <value>The ToDo template is an action item that will be brought into the new customers organization that provides instructions of what needs to be done to bring the application online.</value>
  </data>
  <data name="ToDoTemplate_Instructions" xml:space="preserve">
    <value>Instructions</value>
  </data>
  <data name="ToDoTemplate_Priority" xml:space="preserve">
    <value>Priority for this ToDo item.</value>
  </data>
  <data name="ToDoTemplate_Select_Priority" xml:space="preserve">
    <value>-select priority-</value>
  </data>
  <data name="ToDoTemplate_Title" xml:space="preserve">
    <value>ToDo Template</value>
  </data>
  <data name="ToDoTemplate_WebLink" xml:space="preserve">
    <value>Web Linlk</value>
  </data>
</root>